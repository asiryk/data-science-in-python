# -*- coding: utf-8 -*-
"""1.0-python-basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kSLPiiqFXhGEjncHP7ez_FCLASWbRi4N

# Python basics

## Functions
"""

def add_numbers(x, y):
    return x + y

add_numbers(1, 2)

def add_numbers(x,y,z=None):
    if (z==None):
        return x+y
    else:
        return x+y+z

print(add_numbers(1, 2))
print(add_numbers(1, 2, 3))

def add_numbers(x,y):
    return x+y

a = add_numbers
a(1,2)

"""## Types and Sequences

### Types
"""

# Use `type` to return the object's type.
print(type('This is a string'))
print(type(None))
print(type(False))
print(type(1))
print(type(1.0))
print(type(add_numbers))
print(type( (1, 'a', 2, 'b') ))
print(type( [1, 'a', 2, 'b'] ))
print(type( {'a', 'b', 'c'} ))
print(type( {'key': 'val', 'num': 1, 1: 2} ))

# You can unpack a sequence into different variables:
x = ('Christopher', 'Brooks', 'brooksch@umich.edu')
fname, lname, email = x

"""### Lists
Lists are a mutable data structure.
"""

# Use `append` to append an object to a list.
x = [1, 'a', 2, 'b']
x.append(3.3)

print(x)

# This is an example of how to loop through each item in the list.
for item in x:
    print(item)

# Or using the indexing operator:
i=0
while( i != len(x) ):
    print(x[i])
    i = i + 1

# Use `+` to concatenate lists.
print([1,2] + [3,4])

# Use `*` to repeat lists.
print([1] * 3)

# Use the `in` operator to check if something is inside a list.
print(1 in [1, 2, 3])

"""### Dictionaries
Dictionaries associate keys with values.
"""

# Dictionaries associate keys with values.

x = {'Christopher Brooks': 'brooksch@umich.edu', 'Bill Gates': 'billg@microsoft.com'}
x['Christopher Brooks'] # Retrieve a value by using the indexing operator

x['Kevyn Collins-Thompson'] = None
print(x['Kevyn Collins-Thompson'])

# Iterate over all of the keys:
for name in x:
    print(x[name])

# Iterate over all of the values:
for email in x.values():
    print(email)

# Iterate over all of the items in the dictionary:
for name, email in x.items():
    print(name)
    print(email)

"""### Strings"""

# Since strings are just lists of characters, all lists operations are available.
x = 'This is a string'
print(x[0]) # first character
print(x[0:1]) # first character, but we have explicitly set the end character
print(x[0:2]) # first two characters
print(x[-1])

firstname = 'Christopher'
lastname = 'Brooks'

print(firstname + ' ' + lastname)
print(firstname * 3)
print('Chris' in firstname)

# `split` returns a list of all the words in a string, or a list split on a specific character.
firstname = 'Christopher Arthur Hansen Brooks'.split(' ')[0] # [0] selects the first element of the list
lastname = 'Christopher Arthur Hansen Brooks'.split(' ')[-1] # [-1] selects the last element of the list
print(firstname)
print(lastname)

# Python has a built in method for convenient string formatting.
sales_record = {
'price': 3.24,
'num_items': 4,
'person': 'Chris'}

sales_statement = '{} bought {} item(s) at a price of {} each for a total of {}'

print(sales_statement.format(sales_record['person'],
                             sales_record['num_items'],
                             sales_record['price'],
                             sales_record['num_items']*sales_record['price']))

"""## Reading and Writing CSV files

<br>
Let's import our datafile mpg.csv, which contains fuel economy data for 234 cars.

* mpg : miles per gallon
* class : car classification
* cty : city mpg
* cyl : # of cylinders
* displ : engine displacement in liters
* drv : f = front-wheel drive, r = rear wheel drive, 4 = 4wd
* fl : fuel (e = ethanol E85, d = diesel, r = regular, p = premium, c = CNG)
* hwy : highway mpg
* manufacturer : automobile manufacturer
* model : model of car
* trans : type of transmission
* year : model year
"""

# Commented out IPython magic to ensure Python compatibility.
import csv

# %precision 2

with open('datasets/mpg.csv') as csvfile:
  mpg = list(csv.DictReader(csvfile))

print(mpg[:3])
print(len(mpg))

# `keys` gives us the column names of our csv.
print(mpg[0].keys())

# This is how to find the average cty fuel economy across all cars. 
# All values in the dictionaries are strings, so we need to convert to float.
print(sum(float(d['cty']) for d in mpg) / len(mpg))

# Use `set` to return the unique values for the number of cylinders the cars in our dataset have.
cylinders = set(d['cyl'] for d in mpg)
print(cylinders)

# Here's a more complex example where we are grouping the cars by number of cylinder,
# and finding the average cty mpg for each group.

CtyMpgByCyl = []

for c in cylinders: # iterate over all the cylinder levels
    summpg = 0
    cyltypecount = 0
    for d in mpg: # iterate over all dictionaries
        if d['cyl'] == c: # if the cylinder level type matches,
            summpg += float(d['cty']) # add the cty mpg
            cyltypecount += 1 # increment the count
    CtyMpgByCyl.append((c, summpg / cyltypecount)) # append the tuple ('cylinder', 'avg mpg')

CtyMpgByCyl.sort(key=lambda x: x[0])

print(CtyMpgByCyl)

"""## Dates and Times"""

import datetime as dt
import time as tm

# `time` returns the current time in seconds since the Epoch. (January 1st, 1970)
print('timestamp: ', tm.time())

# Convert the timestamp to datetime.
dtnow = dt.datetime.fromtimestamp(tm.time())
print('datetime: ', dtnow)
print(dtnow.year, dtnow.month, dtnow.day, dtnow.hour)

# `timedelta` is a duration expressing the difference between two dates.
delta = dt.timedelta(days = 100)
print("\ndelta = " + str(delta))

# `date.today` returns the current local date.
today = dt.date.today()
print('\n' + str(today))
print(today - delta)
print(today > today - delta)

"""## Objects and map()"""

# An example of a class in python:
class Person:
    department = 'School of Information' #a class variable

    def set_name(self, new_name): #a method
        self.name = new_name
    def set_location(self, new_location):
        self.location = new_location

person = Person()
person.set_name('Christopher Brooks')
person.set_location('Ann Arbor, MI, USA')
print('{} live in {} and works in the department {}'.format(person.name, person.location, person.department))

# Here's an example of mapping the `min` function between two lists.
store1 = [10.00, 11.00, 12.34, 2.34]
store2 = [9.00, 11.10, 12.34, 2.01]
cheapest = map(min, store1, store2)
print(cheapest)

for item in cheapest:
    print(item)

"""## Lambda and List Comprehensions"""

# Here's an example of lambda that takes in three parameters and adds the first two.
my_function = lambda a, b, c : a + b
print(my_function(1, 2, 3))

# List comprehension.
my_list = [number for number in range(0,100) if number % 2 == 0]
print(my_list)

people = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 'Dr. Daniel Romero']

def split_title_and_name(person):
    title = person.split()[0]
    lastname = person.split()[-1]
    return '{} {}'.format(title, lastname)

list(map(split_title_and_name, people))

my_list = [number for number in range(0, 1000) if number % 2 == 0]
print(my_list)
print([j * i for i in range(10) for j in range(10)]) # i by j 2d matrix

# create unique ids, i.e. aa00
lowercase = 'abcdefghijklmnopqrstuvwxyz'
digits = '0123456789'

correct_answer = [a + b + c + d for a in lowercase for b in lowercase for c in digits for d in digits]
print(len(correct_answer))
print(correct_answer[:10])